//- ============================================================================
//- Mathigon | Graphs and Networks Content
//- (c) 2016 Mathigon
//- ============================================================================


include ../mixins

section#GT_0_0(data-gloss="graph vertex edge")
  +intro

  h2 Introduction

  .row
    .grow
      p Every day we are surrounded by countless connections and networks: roads and rail tracks, phone lines and the internet, electronic circuits and molecular bonds. There are also #[em social networks] between friends and families. All these systems consist of certain points, called #[x-blank(choices="vertices|circles|crossings")], connected by lines, called #[x-blank(choices="edges|boundaries|pairs")]. In mathematics, all these networks are called #[strong graphs].</p>
    div(style="width: 160px;")
      svg#graph0.graph.novertices.noedges(width="160" height="130")
  p #[strong Graph theory] is the study of graphs and their properties. It is one of the most exciting and visual areas of mathematics, and has countless important applications.

  x-gallery(slide-width="300")
    div
      x-media(src="/resources/graphs-and-networks/images/network1.jpg", credit="© Depositphotos / chungking", width="200", height="200", lightbox)
      p.caption Road and Rail Networks
    div
      x-media(src="/resources/graphs-and-networks/images/network6.jpg", credit="© Depositphotos / anterovium", width="200", height="200", lightbox)
      p.caption Integrated Circuits
    div
      x-media(src="/resources/graphs-and-networks/images/network3.jpg", credit="© Depositphotos / Klanneke", width="200", height="200", lightbox)
      p.caption Supply Chains
    div
      x-media(src="/resources/graphs-and-networks/images/network2.jpg", credit="© Depositphotos / Paha_L", width="200", height="200", lightbox)
      p.caption Friendships
    div
      x-media(src="/resources/graphs-and-networks/images/network7.jpg", credit="© Depositphotos / Leonardi", width="200", height="200", lightbox)
      p.caption Neural Connections
    div
      x-media(src="/resources/graphs-and-networks/images/network4.jpg", credit="© Depositphotos / kubais", width="200", height="200", lightbox)
      p.caption The Internet
    // div
      x-media(src="/resources/graphs-and-networks/images/network5.jpg", lightbox)
      p.caption Social Networks


section#GT_0_1(data-gloss="directed")
  p We can sketch the layout of simple graphs using points and lines. The position of points and the length of the lines are irrelevant – we only care about how they are connected to each other. The lines can even cross each other, and don&rsquo;t have to be straight.
  .row
    div(style="width: 200px")
      svg.graph(height="120", width="200", style="margin: 0 auto .8em;")
      p In some graphs, the edges only go one way. These are called #[strong directed graphs].
    div(style="width: 200px")
      svg.graph(height="120", width="200", style="margin: 0 auto .8em;")
      p Some graphs consist of multiple distinct segments which are not connected by edges. These graphs are #[strong disconnected].
    div(style="width: 200px")
      svg.graph(height="120", width="200", style="margin: 0 auto .8em;")
      p Other graphs may contain multiple edges between the same pairs of vertices, or vertices which are connected to themselves (loops).
  p For simplicity, in this chapter, we will only think about undirected and connected graphs without multiple edges and loops.


section#GT_0_2(data-gloss='subgraph')
  p We can create new graphs from an existing graph by removing some of the vertices and edges. The result is called a #[strong subgraph]. Here are a few examples of graphs and subgraphs:
  .row
    .clear(style='width: 200px')
      svg.graph(height='90', width='90', style='float: left; margin-right: 12px;')
      svg.graph(height='90', width='90', style='float: left')
    .clear(style='width: 200px')
      svg.graph(height='90', width='90', style='float: left; margin-right: 12px;')
      svg.graph(height='90', width='90', style='float: left')
    .clear(style='width: 200px')
      svg.graph(height='90', width='90', style='float: left; margin-right: 12px;')
      svg.graph(height='90', width='90', style='float: left')


section#GT_0_3(data-gloss='order degree')
  p The #[strong order] of a graph is its number of vertices. The #[strong degree] of a vertex in a graph is the number of edges which meet at that vertex.
  .row
    div(style='width: 130px')
      svg.graph(height='100', width='100', style='margin: 0 auto .8em;')
      p.text-center Order: #[+input('5')]
    div(style='width: 130px')
      svg.graph(height='100', width='100', style='margin: 0 auto .8em;')
      p.text-center Order: #[+input('8')]
    div(style='width: 130px')
      svg.graph(height='100', width='100', style='margin: 0 auto .8em;')
      p.text-center Degree: #[+input('3')]
    div(style='width: 130px')
      svg.graph(height='100', width='100', style='margin: 0 auto .8em;')
      p.text-center Degree: #[+input('6')]


section#GT_0_4(data-gloss="cycle")
  p.grow Graphs which consist of a single ring of vertices are called #[strong cycles] All cycles have #[+blank("the same number of edges and vertices|more edges than vertices|fewer edges than vertices")]. Most graphs have many cycles as subgraphs.
  .row
    svg.graph(style='width: 90px; height: 90px;')
    svg.graph(style='width: 90px; height: 90px;')
    svg.graph(style='width: 90px; height: 90px;')


section
  h2 Handshakes and Dates
  .row
    .grow
      p You have been invited to an extravagant birthday party. After a rousing celebration the guests get ready to leave, and everyone shakes hands with everyone else. How many handshakes are there in total?
    .party-img.s-hide(style="margin-top: -60px"): img(src='/resources/graphs-and-networks/images/party.jpg', width='260', height='165')


section#GT_1_1
  .row
    .grow
      p We can represent the handshakes using a graph: every person is #[+blank('a vertex|an edge')], and every handshake is #[+blank('an edge|a vertex')]. Suppose that, including yourself and the host, there are #[+var('hnd|5|2,15,1') hnd] people present. Now it is easy to count the number of edges, and we find that there #[+var (hnd == 2 ? 'is ' : 'are ') + hnd * (hnd-1) / 2 + (hnd == 2 ? ' handshake' : ' handshakes')].
      p.subsection(data-needs='blank-0 blank-1') Rather than counting many edges for large numbers of guests, we could also try to find a simple formula that tells us the result for #[em any] number of guests.
    div(style='width: 220px;')
      svg.graph(style='width: 220px; height: 220px;')


section#GT_1_2
  p Each of the #[+var('n|5|2,8,1') n] people at the party shakes hands with #[+var n-1] others. That makes #[+var n] × #[+var n-1] = #[+var n * (n-1)] handshakes in total.
  p.var ${ handshakeTable(n) }
  .subsection
    p Unfortunately this answer is not quite right: we have counted every handshake #[+blank("twice|once|three times")], once for each of the two people involved. Therefore, the correct number of handshakes for #[+var n] guests is #[span.frac.inline #[span #[+var n] × #[+var n-1]]#[span 2]] = #[+var n*(n-1)/2].


section#GT_1_3
  p The handshake graphs are special because every vertex is connected to every other vertex. Graphs with this property are called #[strong complete graphs]. The complete graph with #[+var('comp|5|2,12,1') comp] vertices is often abbreviated as #[em K#[sub #[+var comp]]].
  .row
    svg.graph(style="width: 90px; height: 90px;")
    svg.graph(style="width: 90px; height: 90px;")
    svg.graph(style="width: 90px; height: 90px;")
    svg.graph(style="width: 90px; height: 90px;")
  p We have just shown that a complete graph with #[em n] vertices has #[+frac('<em>n</em> × (<em>n</em> &#8211; 1)', '2')] edges.


section#GT_1_4
  p: img#gt_flags(src="/resources/graphs-and-networks/images/flags.jpg", width="855", height="100")/
  p On a different day, you are invited to a speed dating event for #[+var('m|5|2,8,1') m] boys and #[+var('f|4|2,8,1') f] girls. There are many small tables and every boy spends 5 minutes with each of the girls. How many individual &#8220;dates&#8221; are there in total?
  .row.subsection
    .grow: p In this case, the corresponding graph consists of two separate sets of vertices. Every vertex is connected to all the vertices in #[+blank("the opposite|its own")] set, but none of the vertices in #[+blank("its own|the opposite")] set. Graphs which have this layout are called #[strong bipartite graphs].
    div(style="width: 300px;"): svg.graph(style="width: 300px; height: 140px;")
  p.subsection(data-needs="blank-0 blank-1") The bipartite graph with two sets of size #[em x] and #[em y] is often written as #[em K#[sub x,y]]. It has #[+blank("x × y|x + y|2x - y")] edges, which means that in the above example there are #[+var m] × #[+var f] = #[+var m*f] dates.

//- ----------------------------------------------------------------------------------------------

section#GT_2_0
  h2 The Bridges of Königsberg
  .row
    .grow
      p One of the first mathematicians to think about graphs and networks was #[x-bio#euler Leonhard Euler]. Euler was intrigued by an old problem regarding the town of K&ouml;nigsberg near the Baltic Sea. #[span.lgrey (Today, the city is called Kaliningrad and located in Russia.)]
      p.quote The river Pregel divides Königsberg into four separate parts, which are connected by seven Bridges. Is it possible to walk around the city crossing every one of the bridges exactly once – but not more than once? You can start and finish anywhere, not necessarily in the same place.
    div(style="width: 250px; margin-top: -5em;")
      img(src="/resources/graphs-and-networks/images/konigsberg1.jpg" width="250" height="350" style="margin-top: 2.4em")
  p Try to find a valid route by drawing on this map:
  x-slideshow
    .slide
      x-solved
      include svg/bridges-1.svg
      button.btn.btn-bounce Clear
    .slide(data-needs="bridge-0")
      x-solved
      include svg/bridges-2.svg
      button.btn.btn-bounce Clear
    .slide(data-needs="bridge-1")
      x-solved
      include svg/bridges-3.svg
      button.btn.btn-bounce Clear
    .slide(data-needs="bridge-2")
      x-solved
      include svg/bridges-4.svg
      button.btn.btn-bounce Clear


section#GT_2_1
  p In the case of Königsberg it seems to be impossible to find a valid route, but some of the other cities do work. Euler managed to find a simple rule that can be applied to any city, without having to try lots of possibilities – using graph theory.
  .row
    .grow
      p First, we need to convert the city maps into graphs with edges and vertices. Every island or region of land is represented by #[+blank("a vertex|an edge|an area")] and every bridge connecting two regions is represented by a corresponding #[+blank("edge|vertex|street")].
      p.subsection(data-needs="blank-0 blank-1") Now the problem of &#8220;touring a city while crossing every bridge exactly once&#8221; has become a problem of &#8220;drawing a graph with one continuous stroke while tracing every edge exactly once&#8221;.
    div(style="width: 200px")
      include svg/konigsberg.svg


section
  p Try drawing these graphs with one continuous stroke:
  p.todo Interactive coming soon…


section#GT_2_3
  p Just like for the city maps before, we find that some graphs are possible while others are not. To help us understand why, let us label every vertex with its #[x-gloss#order order]:

  .frame.fill(style="padding: 20px")
    .frame-body(style="margin-bottom: -18px;"): strong These graphs are possible:
    include svg/vertex-orders-1.svg
    .frame-body(style="margin-bottom: -24px;"): strong These graphs are not possible:
    include svg/vertex-orders-2.svg
    .frame-body Colour vertices by&nbsp;&nbsp;
      select.btn
        option(value="val", selected) value
        option(value="size") small and large
        option(value="prime") prime and composite
        option(value="eo") even and odd


section#GT_2_4
  p Comparing these numbers for graphs which are possible and those which are not possible, it seems that a graph can be drawn if it <span class="blank wide" data-choices="has no more than two &#8220;odd&#8221; vertices|only has &#8220;even&#8221; vertices|has no vertices with an order larger than 4|has an odd number of vertices|has no vertices of order 3"></span>. This condition can be explained if we look at just a single vertex in the graph:</p>
  x-slideshow
    .stage
      include svg/konigsberg-proof.svg
    .legend Here you can see a single, magnified vertex in a graph.
    .legend If we draw the graph, we will eventually have an edge leading towards this vertex, and then another one leading away. This makes two edges meeting at the vertex.
    .legend Maybe the vertex is a crossing rather than a corner. In that case there will be another edge leading towards the vertex, and another edge leading away. Now we have four edges.
    .legend And in some graphs, there may even be a third pair of edges leading towards and away from the vertex. Now there are six edges.
    .legend Notice that, either way, there always is an even number of edges meeting at the vertex.
    .legend The only two exceptions are the vertices where the path starts, and where it ends &#8211; these two may have an odd number of edges. If the start and end point are the same, all vertices in the graph are even.


section
  .row.right
    .grow
      p If you scroll back to the map of Königsberg, you will find that there are more than two islands with an odd number of bridges. Therefore a route that crosses every bridge exactly once is indeed impossible &#8211; and this is what Leonard Euler discovered.
      p Euler&rsquo;s discovery may not seem particularly useful in real life, but graphs are at the foundation of many other geographic problems, such as finding directions between two locations. We will discover more of these applications later.
    div(style="width: 240px"): x-media(lightbox, credit="© Depositphotos / DmitryRukhlenko", width="240", height="260", src="/resources/graphs-and-networks/images/prague.jpg")

//- ----------------------------------------------------------------------------------------------

section#GT_3_0
  h2 The Three Utilities Problem
  .row
    .grow
      p Let us try another simple puzzle that is related to graph theory.
      p.quote(style="margin-bottom: 0;") In a small village there are three utility plants, producing water, electricity and gas respectively, and three houses which need to be served. Unfortunately, due to the city’s layout, the pipes or cables for every product are not allowed to cross.
    div(style="width: 300px;")
      x-media(credit="© Depositphotos / Grossinge", width="300", height="169", src="/resources/graphs-and-networks/images/factory.mp4")
  p Try to connect each of the plants below to each of the houses, without any of your lines crossing:
  .frame.fill
    include svg/utilities.svg
    button.btn.btn-bounce Clear


section#GT_3_1
  p Just like the Königsberg bridges before, you quickly discover that this problem is also impossible. It seems that some graphs can be drawn without overlapping edges – these are called #[strong planar graphs] – but others cannot.
  .row
    div(style="width: 200px")
      svg.graph(width="200" height="200" style="margin-bottom: .4em;")
      p.text-center <em>K</em><sub>3</sub> is planar.
    div(style="width: 200px")
      svg.graph#planar-2(width="200" height="200" style="margin-bottom: .4em;")
      p.text-center #[em K]#[sub 4] #[+blank("is planar|is not planar")].
    div(style="width: 200px")
      svg.graph#planar-3(width="200" height="200" style="margin-bottom: .4em;")
      p.text-center #[em K]#[sub 5] #[+blank("is not planar|is planar")].


section
  p The #[x-gloss#complete complete graph] <em>K<sub>5</sub></em> is the smallest graph that is not planar. Any other graph that contains <em>K<sub>5</sub></em> as a subgraph in some way is also not planar. This includes <em>K<sub>6</sub></em>, <em>K<sub>7</sub></em>, and all larger complete graphs.
  p The graph in the three utilities puzzle is the #[x-gloss#bipartite bipartite graph] <em>K<sub>3,3</sub></em>. It turns out that any non-planar graph must contain a <em>K<sub>5</sub></em> or a <em>K<sub>3,3</sub></em> or a #[x-gloss#subdivision subdivision] of these two graphs as a subgraph.


section#GT_3_3
  .box.problem-box
    .box-title: h3 Planarity
    .box-body
      x-solved
      svg#planarity.frame(viewBox="0 0 640 320")
      p This is a planar graph, but the #[+var('n|7|5,20,1') n] vertices have been scrambled up. Rearrange the vertices so that none of the edges overlap.
      button.btn.btn-bounce New Random Graph

//- ----------------------------------------------------------------------------------------------

section#GT_4_1
  h2 Euler&rsquo;s Formula
  p All planar graphs divide the plane they are drawn on into a number of areas, called #[strong faces].
  .row
    div(style="width: 200px")
      include svg/euler-2.svg
      p.text-center(style="margin: .4em 0 0") #[+input('6')] Vertices
      p.text-center(style="margin: .4em 0 0") #[+input('5')] Faces
      p.text-center(style="margin: .4em 0 0") #[+input('10')] Edges
      p.text-center.euler-sum 11 Vertices + Faces
    div(style="width: 200px")
      include svg/euler-1.svg
      p.text-center(style="margin: .4em 0 0") #[+input('8')] Vertices
      p.text-center(style="margin: .4em 0 0") #[+input('7')] Faces
      p.text-center(style="margin: .4em 0 0") #[+input('14')] Edges
      p.text-center.euler-sum 15 Vertices + Faces
    div(style="width: 200px")
      include svg/euler-3.svg
      p.text-center(style="margin: .4em 0 0") #[+input('12')] Vertices
      p.text-center(style="margin: .4em 0 0") #[+input('13')] Faces
      p.text-center(style="margin: .4em 0 0") #[+input('24')] Edges
      p.text-center.euler-sum 25 Vertices + Faces


section
  p When comparing these numbers, you will notice that the number of edges is always #[+blank("one less|bigger|the same")] than the number of faces plus the number of vertices. In other words, <em><strong class="blue">F</strong></em> + <em><strong class="green">V</strong></em> = <em><strong class="red">E</strong></em> + 1. This result is called <strong>Euler&rsquo;s equation</strong> and is named after the same #[x-bio#euler mathematician] who solved the K&ouml;nigsberg Bridges problem.</p>
  p Unfortunately, there are infinitely many graphs and we can&rsquo;t check every one to see if Euler’s equation works. Instead we can try to find a simple #[x-gloss#proof proof] that works for any graph&hellip;</p>


section#GT_4_2
  x-slideshow
    .stage
      svg(x="0px" y="0px" viewBox="0 0 640 200" class="frame")
        line.link(style="stroke-width: 3px; display: none" x1="270" y1="30"  x2="150" y2="100")
        line.link(style="stroke-width: 3px; display: none" x1="150" y1="100" x2="270" y2="170" )
        line.link(style="stroke-width: 3px; display: none" x1="270" y1="170" x2="390" y2="100")
        line.link(style="stroke-width: 3px" x1="390" y1="100" x2="270" y2="30")
        circle.node(cx="270" cy="30"  r="7")
        circle.node(cx="150" cy="100" r="7" style="display: none")
        circle.node(cx="270" cy="170" r="7" style="display: none")
        circle.node(cx="390" cy="100" r="7" style="display: none")


      div(style="position: absolute; top: 20px; right: 0; font-size: 1.2em;")
        table.grid.table-small
          tr
            td: strong.blue.i F
            td: strong.green.i V
            td: strong.red.i E
          tr
            td.xf 0
            td.xv 1
            td.xe 0
        p <strong class="blue xf">0</strong> + <strong class="green xv">1</strong> &nbsp;=&nbsp; <strong class="red xe">0</strong> + 1

    .legend The simplest graph consists of a single vertex. We can easily check that Euler&rsquo;s equation works.
    .legend Let us add a new vertex to our graph. We also have to add an edge, and Euler&rsquo;s equation still works.
    .legend If we want to add a third vertex to the graph we have two possibilities. We could create a small triangle: this adds one vertex, one face and two edges, so Euler&rsquo;s equation still works.
    .legend Instead we could simply extend the line by one: this adds one vertex and one edge, and Euler&rsquo;s equation works.
    .legend Let’s keep going: if we now create a quadrilateral we add one vertex, two edges and one face. Euler&rsquo;s equation still works.


section#GT_4_3
  p Any (finite) graph can be constructed by starting with one vertex and adding more vertices one by one. We have shown that, whichever way we add new vertices, Euler&rsquo;s equation is valid. Therefore it is valid for all graphs.
  p The process we have used is called <strong>mathematical induction</strong>. It is a very useful technique for proving results in infinitely many cases, simply by starting with the simplest case, and showing that the result holds at every step when constructing more complex cases.
  .svg-block: include svg/dominoes.svg


section
  p Many planar graphs look very similar to the nets of #[x-gloss#polyhedron polyhedra], three dimensional shapes with #[x-gloss#polygon polygonal] faces. If we think of polyhedra as made of elastic bands, we can imagine stretching them out until they become flat, planar graphs:
  .row
    .grow: x-img-sequence(src="/resources/graphs-and-networks/images/cube/cube#.png", pages="32", width="300", height="300")
    .grow: x-img-sequence(src="/resources/graphs-and-networks/images/dodecahedron/dodeca#.png", pages="32", width="300", height="300")


section
  p This means that we can use Euler&rsquo;s formula not only for planar graphs but also for all polyhedra &#8211; with one small difference. When transforming the polyhedra into graphs, one of the faces disappears: the topmost face of the polyhedra becomes the &#8220;outside&#8221; of the graphs.
  p In other words, if you count the number of <strong class="red">edges</strong>, <strong class="blue">faces</strong> and <strong class="green">vertices</strong> of <em>any</em> polyhedron, you will find that <em><strong class="blue">F</strong></em> + <em><strong class="green">V</strong></em> = <em><strong class="red">E</strong></em> + <span class="blank input" data-answer="2"></span>.
  .row
    div(style="width: 200px")
      x-media(width="200", height="200", src="/resources/graphs-and-networks/images/icosahedron.mp4")
      p.caption Icosahedron<br/>one of the 5 <a href="/course/polygons-and-polyhedra#platonic-solids">Platonic Solids</a><br/><strong class="blue">20</strong> Faces, <strong class="green">12</strong> Vertices and <strong class="red">30</strong> Edges
    div(style="width: 200px")
      x-media(width="200", height="200", src="/resources/graphs-and-networks/images/rhombi.mp4")
      p.caption Small Rhombicosidodecahedron<br/>one of the 13 <a href="/course/polygons-and-polyhedra#more-on-polyhedra">Archimedean Solids</a><br/><strong class="blue">62</strong> Faces, <strong class="green">60</strong> Vertices and <strong class="red">120</strong> Edges
    div(style="width: 200px")
      x-media(credit="pond5.com", width="200", height="200", src="/resources/graphs-and-networks/images/football.mp4")
      p.caption Football, or <em>Truncated Icosahedron</em><br/><strong class="blue">32</strong> Faces (12 black and 20 white),<br/><strong class="green">60</strong> Vertices and <strong class="red">90</strong> Edges

//- ----------------------------------------------------------------------------------------------

section
  h2 Map Colouring
  .row
    .grow
      p We have already used graph theory with certain maps. As we zoom out, individual roads and bridges disappear and instead we see the outline of entire countries.
      p When colouring a map – or any other drawing consisting of distinct regions – adjacent countries cannot have the same colour. We might also want to use as few different colours as possible.
      p Some simple &#8220;maps&#8221;, like a chessboard, only need two colours (black and white), but most complex maps need more.
    div(style="margin-top: -5px;")
      x-media(credit="© Depositphotos / elenathewise", src="/resources/graphs-and-networks/images/globe.jpg", width="240", height="320")


section#GT_5_1
  p When colouring the map of US states, 50 colours are obviously enough, but far fewer are necessary. Try colouring the maps below with as few colours as possible:
  p.text-center
    span.four-colour-icon.on
    span.four-colour-icon
    span.four-colour-icon
    span.four-colour-icon
    span.four-colour-icon
    span.four-colour-icon
    span.four-colour-icon

  x-slideshow.four-colours
    .slide
      x-solved
      include svg/colours-1.svg
      .colour-count 0
      button.btn.btn-bounce.clear Clear
      button.btn.btn-bounce.solve Solve
      p.small.lgrey.text-center Note that states or countries which only share a #[em corner] are allowed to have the same colour.#[br]Alaska and Hawaii are isolated from all of the other states and can have any colour.
    .slide
      x-solved
      include svg/colours-2.svg
      .colour-count 0
      button.btn.btn-bounce.clear Clear
      button.btn.btn-bounce.solve Solve
    .slide
      x-solved
      include svg/colours-3.svg
      .colour-count 0
      button.btn.btn-bounce.clear Clear
      button.btn.btn-bounce.solve Solve
    .slide
      x-solved
      include svg/colours-4.svg
      .colour-count 0
      button.btn.btn-bounce.clear Clear
      button.btn.btn-bounce.solve Solve


section#GT_5_2
  .row
    .grow: p All of these maps can be coloured with only four different colours, but it is not hard to imagine that other, very complicated maps might need many more colours. In fact, some maps need #[em at least] four colours, whenever they contain four countries all connected to each other.
    div(style="width: 200px;"): img(src="/resources/graphs-and-networks/images/four-colours.png" width="200" height="120")

  p Like before, we can convert a map with countries and borders into a planar graph: every country becomes #[+blank("a vertex|an edge|a face")], and countries which #[+blank("share a border|have the same colour")] get connected by an edge:
  .svg-block: include svg/colour-graph.svg
  p.subsection(data-needs="blank-0 blank-1") Now we want to colour the vertices of a graph, and two vertices must have a different colour if they are connected by an edge.


section
  .row.right
    div(style="width: 240px;")
      x-media(lightbox, credit="© Depositphotos / sergeyussr", width="240", height="320", src="/resources/graphs-and-networks/images/england-counties.jpg")
    .grow
      p In 1852, the botany student #[x-bio#guthrie Francis Guthrie] had to colour a map of counties in England. He observed that four colours seemed to suffice for any map he tried, but he was not able to find a proof that worked for #[em all] maps. This turned out to be an extremely difficult problem, and became known as the #[strong four colour theorem].
      p During the following 100 years, many mathematicians published &#8220;proofs&#8221; to the four colour theorem, only for mistakes to be found later. Some of these invalid proofs were so convincing that it took more than 10 years to discover errors.
      p For a long time, mathematicians were unable to either prove that four colours are enough, or to find a map that needed more than four colours.


section
  x-parallax(background='/resources/graphs-and-networks/images/ibm-360.jpg')
    .feature-text.right
      p Little progress was made on the four colour problem until 1976, when #[x-bio#haken Wolfgang Haken] and #[x-bio#appel Kenneth Appel] used a computer to finally solve it. They reduced infinitely many possible maps to 1936 special cases, which were each checked by a computer taking over 1000 hours in total.


section
  p The four colour theorem is the first well-known mathematical theorem to be proven using a computer, something that has become much more common and less controversial since. Faster computers and a more efficient algorithm mean that today you can solve the four colour theorem on a laptop in just a few hours.
  .img-block
    x-media(src="/resources/graphs-and-networks/images/suffice.jpg", width="320", height="80", credit="http://www.math.illinois.edu/History/postmarks.pdf")
    p.caption Postmark for the Department of Mathematics at the University of<br/>Illinois Urbana-Champaign, where Haken and Appel worked.


section
  .row
    .grow
      p The four colour theorem only works for maps on a flat plane or a sphere, and where all countries consist of a single area.
      p However mathematicians have also looked at maps of #[em empires], where countries can consist of multiple disconnected components, and at maps on differently-shaped planets, such as a torus (doughnut shape). In these cases you may need more than four colours and the proofs become even more difficult.
    div(style="width: 300px")
      x-media(width="300", height="220", src="/resources/graphs-and-networks/images/torus.mp4")
      p.caption This map on a torus requires seven colours.

//- ----------------------------------------------------------------------------------------------

section
  h2 The Travelling Salesman Problem

  .row.right
    .grow
      p Let us think, once more, about networks and maps. Imagine that a delivery service has to visit #[+var('tsn|8|2,50,1') tsn] different cities to distribute parcels. We can think of these cities as the vertices in a graph. If all of the cities are connected by streets, this is a #[+blank("complete graph|cycle|bipartite graph")], so there are #[span.frac.inline #[span #[+var tsn] × (#[+var tsn] – 1)]#[span 2]] = #[+var tsn*(tsn-1)/2} edges in total.

      p The delivery truck has to visit all cities, in any order. In the Königsberg bridges problem we wanted to find paths which travel along #[em every edge] exactly one. Now we want to find paths which visit <em>every vertex</em> exactly once. These paths are called <strong>Hamiltonian cycles</strong>.

    div(style="width: 260px"): x-media(credit="© Depositphotos / ilfede", src="/resources/graphs-and-networks/images/truck.jpg", width="260", height="280")


section
  p There are countless different possibilities for Hamiltonian cycles in complete graphs. In fact, we can pick any vertex as starting vertex and then pick any of the remaining cities in any order:
  .row
    //- Table Diagram
    .grow: p.todo Diagram coming soon…
    //- Graph Diagram
    .grow: p.todo Diagram Coming Soon…


section#GT_6_2
  p In a graph with #[+var('tsn1|4|2,10,1') tsn1] cities, every Hamiltonian cycle must also contain #[+var tsn1] cities. Now,
  ul.var ${tsmString(tsn1)}
  p This means that, in total, there are #[+var tsnPaths(tsn1)] possible paths. A shorthand for this product is #[+var tsn1]! or #[+var tsn1] #[strong Factorial].
  p.subsection You could imagine that it might not be possible to travel directly between two cities - without going via another city. In that case we no longer have a complete graph, and finding the number of Hamiltonian cycles, if they exist at all, becomes much more difficult.


section
  .row.right
    .grow
      p So far we have ignored the fact that some cities might be further apart than others. In real life, however, this is a very important consideration: we don&rsquo;t just want to find <em>any</em> path but we want to find the shortest one. This is called the <strong>Travelling Salesman Problem</strong>. It has to be solved not only in transportation and logistics, but also when positioning transistors on microchips, to make faster computers, or when analysing the structure of #[x-gloss#dna DNA].
      p One simple method would be to try all possible paths, finding the length of each, and then picking the shortest one. However we have just shown that, even with just <i data-var="tsn2|10|2,20,1">tsn2</i> cities there are <i>tsn2</i>! = <i>M.numberFormat(M.factorial(tsn2))</i> possible paths. Once you have hundreds or thousands of vertices, trying all possible paths becomes impossible, even using powerful computers.
    div(style="width: 220px"): x-media(lightbox, src="/resources/graphs-and-networks/images/microchip.jpg", width="210", height="365", credit="© Depositphotos / claudiodivizia")


section#GT_6_4
  p Unfortunately there is no more efficient algorithm to solve the travelling salesman problem. Instead, mathematicians and computer scientists have developed various algorithms that find <em>good</em> solutions, even if they may not be the very best one. These algorithms, which only give approximate solutions, are called <strong>Heuristics</strong>.
  p Try rearranging the cities on this map. You can remove cities by clicking on them, and you can add cities by clicking anywhere on the map.</p>
  .tsm-wrap.frame.fill.clearfix
    .tsm-box: svg


section
  .row
    .grow
      p The #[strong Greedy Algorithm] (or Nearest Neighbour Algorithm) is very simple: you start in a random city and consecutively move to the closest city you haven&rsquo;t visited before. Once you have visited all cities, you stop.
    //- Animation: Slider
    div(style="width: 300px"): p.todo Animation coming soon…
  p You can show that, on average, paths found using the greedy algorithm are 25% longer than the shortest possible path.


section
  .row
    .grow
      p The #[strong 2-Opt Algorithm] starts with a random possible path. Then you repeatedly pick two edges and swap them around if that would reduce the length of the path. You stop when you can't reduce the length further by swapping any pairs of edges.
    //- Animation: Slider
    div(style="width: 300px"): p.todo Animation coming soon…


section
  x-parallax(background="/resources/graphs-and-networks/images/ants.jpg")
    .feature-credit © Depositphotos / dovapi
    .feature-text(style="background-color: rgba(0,0,0,.8)")
      p It turns out that, long before computers even existed, Nature had found a clever way to find optimal paths between different locations: in ant colonies.
      p Ants want to find the shortest possible routes between their nest and possible food sources. They can communicate with each other through chemicals which they leave along their trail, and which other ants can follow.


section
  .row
    .grow: ul
      li The ant colony sends out many scouts which initially travel in random directions. Once they find food, they return, leaving behind a trail of pheromone.
      li.subsection Other ants tend to follow a trail when they find one, which leads them to food. On their return journey they deposit more pheromone, thus reinforcing the trail.
      li.subsection Over time, pheromone evaporates. The longer a path is, the more time it takes ants to travel along it, and so the pheromone has more time to evaporate. Short paths, on the other hand, can get reinforced more quickly, so their strength increases faster.
    div(style="width: 240px"): p.todo Diagram coming soon…


section
  .row.right
    div(style="width: 220px"): x-media(style="margin-top: 5px", credit="© Depositphotos / lifeonwhite", src="/resources/graphs-and-networks/images/ant.jpg", width="220", height="220")
    .grow
      p Ant Colony System (ACS) algorithms try to replicate this behaviour on computers, using many “virtual” ants. They can quickly find very good solutions for the travelling salesman problem.
      p One particularly useful property of ACS algorithms is that they can run continuously and adapt in real time to changes to the graph. These changes could be caused by car accidents and road closures on street networks, or by traffic spikes to web servers on computer networks.


section
  .row
    div(style="width: 140px"): img(src="/resources/graphs-and-networks/images/binary.jpg", width="140", height="320")
    .grow
      p The Travelling Salesman problem is #[x-gloss#np NP-hard], which means that it is very difficult to be solved by computers (at least for large numbers of cities).
      p Finding a fast and exact algorithm would have serious implications in the field of computer science: it would mean that there are fast algorithms for <em>all</em> NP-hard problems. It would also render most of internet security useless, which relies on the fact that certain problems are believed to be very difficult for computers.
      p Finding a fast algorithm to solve the travelling salesman problem would also solve one of the most famous open problems in mathematics and computer science, the <strong>P vs NP</strong> problem. It is one of the seven #[x-gloss.wide#millennium-prize Millennium Prize Problems], each carrying a $1m prize.

//- ----------------------------------------------------------------------------------------------

section
  h2 Graph Theory in Everyday Life
  p Throughout this chapter we have seen many applications of graph theory, though some were somehow contrived. It turns out, however, that graphs are at the very heart of many objects and concepts in everyday life.
  .row
    .grow
      p The internet, for example, is a vast, virtual graph. Every vertex is an individual webpage, and every edge means that there is a hyperlink between two pages. Note that links only go one way, so this graph is <span class="blank" data-choices="directed|multi-line|conected"></span>, and that this graph is <em>very, very, large</em>.</p>
      p Some websites, like Wikipedia or Facebook, have lots of incoming links, while many smaller websites may have very few incoming links. This is the underlying concept which Google uses to sort search results.</p>
    div(style="width: 240px"): img(credit="© various", src="/resources/graphs-and-networks/images/internet.png", width="240", height="240")

section
  p Websites with more incoming links tend to be of higher quality and should be shown at the top of the search results. For example, when searching for &#8220;London&#8221;, official tourist information sites are shown before small shops in London, or blogs of people who live in London. This simple idea from Graph theory, the <strong>Page Rank Algorithm</strong>, made Google significantly better than other early search engines.


section
  x-parallax(background="/resources/graphs-and-networks/images/internet.jpg")
    .feature-credit © LyonLabs, LLC and Barrett Lyon, 2014
    .feature-text
      p The internet is the largest network ever created by mankind. This image shows a very small proportion of all the computers and devices connected to the internet.


section
  p While websites and hyperlinks form a <em>virtual</em> graph, there is also the <em>physical</em> network of computers, servers, routers, phone lines and cables.
  .row.right
    .grow: p Every time you make a phone call or load a website, network operators have to find a way to connect sender and receiver, without exceeding the capacity of any individual cable or connection. Graph theory and probability make it possible to guarantee a reliable service, for example by finding diversions when a particular connection is busy.
    div(style="width: 220px"): x-media(lightbox src="/resources/graphs-and-networks/images/phone.jpg", width="220", height="166", credit="© Depositphotos / Asiana")


section
  p Graphs also play an important role in transportation and navigation. All flight, train and subway networks form graphs, which can be used when creating efficient schedules. One of the most recognisable graphs is the London Underground map:
  p: x-media(lightbox, src="/resources/graphs-and-networks/images/tube-map.png", width="720", height="480", credit="© Transport for London, 2014")


section
  .row
    .grow: p All roads and motorways also form a large network, which is used by navigation services like Google Maps when working out the shortest route between two given points.
    div(style="width: 60px"): x-media(credit="© Google", src="/resources/graphs-and-networks/images/google-maps.jpg", width="70", height="70")
  .row
    div(style="width: 280px"): x-media(lightbox, credit="© Depositphotos / Paha_L", src="/resources/graphs-and-networks/images/congestion.jpg", width="280", height="170")
    .grow
      p In the future, <strong>Intelligent Transportation Systems</strong> will reduce congestion and accidents by routing cars more efficiently, using location data collected from smartphones and self-driving cars. This could save millions of hours lost on the road every year, significantly reduce pollution, and allow emergency services to travel faster.</p>


section
  x-parallax(background="/resources/graphs-and-networks/images/flights.jpg")
    .feature-credit © Depositphotos / Antartis
    .feature-text: p This image shows the network of commercial airline flights across northern Europe.


section
  p There are countless other graphs in science, engineering or everyday life:
  .row.graph-applications
    div(style="width: 200px")
      x-media(lightbox, credit="© Depositphotos / digiart", src="/resources/graphs-and-networks/images/molecules.jpg", width="200", height="200")
      p The links between atoms in <strong>molecules</strong> and crystal grids form a graph.
    div(style="width: 200px")
      x-media(lightbox, credit="© Depositphotos / angellodeco", src="/resources/graphs-and-networks/images/epidemic.jpg", width="200", height="200")
      p The <strong>spread of diseases</strong> and epidemics can be modelled using a network.
    div(style="width: 200px")
      x-media(lightbox, credit="© Depositphotos / CoreyFord", src="/resources/graphs-and-networks/images/evolution.jpg", width="200", height="200")
      p In Biology, the <strong>evolutionary trees</strong> that show the ancestry of species form a graph.
    div(style="width: 200px")
      x-media(lightbox, credit="© Depositphotos / anterovium", src="/resources/graphs-and-networks/images/network6.jpg", width="200", height="200")
      p The different components of <strong>electric circuits</strong> and computer chips form a network.
    div(style="width: 200px")
      x-media(lightbox, credit="© Depositphotos / franckito", src="/resources/graphs-and-networks/images/letters.jpg", width="200", height="200")
      p The grammatical structure of <strong>languages</strong> can be modelled using graphs, for example to create translation algorithms.
    div(style="width: 200px")
      x-media(lightbox, credit="© Depositphotos / Yermek", src="/resources/graphs-and-networks/images/finance.jpg", width="200", height="200")
      p Graphs also have many applications in <strong>probability</strong>, <strong>game theory</strong> and <strong>financial mathematics</strong>.

//- ----------------------------------------------------------------------------------------------

section
  h2 Social Networks
  p Finally, let us think about one particularly good example of graphs which exist in everyday life: social media. Here, vertices represent #[+blank("people|friends|networks")] and edges represent friendships, likes, subscriptions or followers.
  p When we start drawing social media graphs, we can clearly see certain <strong>clusters</strong> of mutual friends, who may have gone to the same school or live in the same city. We can also determine people's <strong>centrality</strong>, which depends on how well-connected a vertex is, and which may be a measure of a person&rsquo;s popularity in social media.
  .img-block: x-media(lightbox, src="/resources/graphs-and-networks/images/social-network.png", width="720", height="500")


section
  .row
    .grow
      p In 2014, Facebook had 1.4 billion active users and a total of more than 200 billion friendships. Half of all Facebook users have more than 200 friends, and since most of our friends have a similar number of friends, we could easily have tens of thousands of <em>friends of friends</em>.
      p An exciting question would now be: if you pick any two random Facebook users, how many &#8220;friendship edges&#8221; would you need to follow to get from one to the other? For example, the distance between friends is #[+input(1)], the distance between friends of friends is #[+input(2)], and so on.
    div(style="width: 200px"): x-media(credit="© Depositphotos / Mikado767", src="/resources/graphs-and-networks/images/facebook-like.png", width="200", height="200")


section
  p Based on a <a href="https://research.facebook.com/blog/three-and-a-half-degrees-of-separation/" target="_blank">study</a> which Facebook conducted in 2016, you are, on average, connected to anyone else on Facebook through at most 3.57 other people: we say there are 3.57 #[strong Degrees of separation].
  p In other words, if you pick any one of the billions of Facebook users all around the world, they will have a friend of a friend who knows a friend of one of your friends. And this includes celebrities, politicians or royalty…
  .img-block
    x-media(lightbox, src="/resources/graphs-and-networks/images/facebook.jpg", width="720", height="360", credit="© Facebook, 2010")
    p.caption Geographic visualisation of all Facebook friendships in 2010.


section
  .row
    div(style="width: 200px;"): x-media(credit="© Metro-Goldwyn-Mayer, 1993", src="/resources/graphs-and-networks/images/six-degrees.jpg", width="200", height="265", style="border: 1px solid #CCC")
    .grow
      p In 1929, when the Hungarian author #[x-bio#karinthy Frigyes Karinthy] first proposed the idea of &#8220;six degrees of Separation&#8221;, there was no internet or social media, but the world had already started to become more interconnected.
      p In 1967, #[x-bio#milgram Stanley Milgram] conducted a first empirical experiment, where 296 participants living in Nebraska and Kansas were asked to deliver a letter to a particular person living in Boston, Massachusetts. They all had to choose a friend to send the letter to, who then picked another friend. At every step, the letter moved closer to Boston. Milgram found that there were, on average, only 5.2 intermediate friends &#8211; 5.2 degrees of separation.

  p Today, every one of us is part of countless invisible graphs, which underly our social interactions, travel, internet and technology, science, and so much more.
